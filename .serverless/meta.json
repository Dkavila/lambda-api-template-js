{
  "unknown": {
    "versionSfCore": null,
    "versionFramework": "4.4.15",
    "isWithinCompose": false,
    "composeOrgName": null,
    "composeServiceName": null,
    "command": [],
    "options": {},
    "error": null,
    "machineId": "7f8ab816af9b49f437a9bc605b91d3d9",
    "serviceProviderAwsCfStackId": null,
    "serviceProviderAwsCfStackCreated": null,
    "serviceProviderAwsCfStackUpdated": null,
    "serviceProviderAwsCfStackStatus": null,
    "serviceProviderAwsCfStackOutputs": null
  },
  "C:\\Users\\Derick\\Documents\\Projects\\lambda-api-template": {
    "versionSfCore": null,
    "versionFramework": "4.4.15",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeServiceName": null,
    "servicePath": "C:\\Users\\Derick\\Documents\\Projects\\lambda-api-template",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "derickavila",
      "app": "lambda-api-template",
      "service": "lambda-api-template",
      "provider": {
        "name": "aws",
        "runtime": "nodejs18.x",
        "environment": {
          "NODE_ENV": "${env:NODE_ENV}",
          "API_KEY": "<REDACTED>"
        }
      },
      "plugins": [
        "serverless-offline"
      ],
      "functions": {
        "app": {
          "handler": "handler.app",
          "events": [
            {
              "http": {
                "path": "/",
                "method": "any"
              }
            },
            {
              "http": {
                "path": "/{proxy+}",
                "method": "any"
              }
            }
          ]
        }
      }
    },
    "serviceRawFile": "org: derickavila\r\napp: lambda-api-template\r\nservice: lambda-api-template\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs18.x\r\n  environment:\r\n    NODE_ENV: ${env:NODE_ENV}\r\n    API_KEY: ${env:API_KEY}\r\n\r\nplugins:\r\n  - serverless-offline\r\n\r\nfunctions:\r\n  app:\r\n    handler: handler.app\r\n    events:\r\n      - http:\r\n          path: /\r\n          method: any\r\n      - http:\r\n          path: /{proxy+}\r\n          method: any\r\n",
    "command": [
      "offline"
    ],
    "options": {},
    "error": {
      "message": "Cannot resolve '${env:NODE_ENV}' variable at 'provider.environment.NODE_ENV'. No value is available for this variable, and no default value was provided. Please check your variable definitions or provide a default value.",
      "stack": "Error: Cannot resolve '${env:NODE_ENV}' variable at 'provider.environment.NODE_ENV'. No value is available for this variable, and no default value was provided. Please check your variable definitions or provide a default value.\n    at _ResolverManager.resolve (file:///C:/Users/Derick/.serverless/releases/4.4.15/package/dist/sf-core.js:693:57191)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async #handlePlaceholderNode (file:///C:/Users/Derick/.serverless/releases/4.4.15/package/dist/sf-core.js:693:55563)\n    at async file:///C:/Users/Derick/.serverless/releases/4.4.15/package/dist/sf-core.js:693:53491\n    at async processNodeAndHandleCompletion (file:///C:/Users/Derick/.serverless/releases/4.4.15/package/dist/sf-core.js:693:44148)",
      "code": "MISSING_VARIABLE_RESULT"
    },
    "machineId": "7f8ab816af9b49f437a9bc605b91d3d9",
    "stage": "dev",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "b6c984ac-8cc7-4a1e-873f-53d073e94c67",
    "orgName": "derickavila",
    "userId": "4jbZgB3NFjY7H9zPNT",
    "dashboard": {
      "isEnabledForService": true,
      "requiredAuthentication": false,
      "orgFeaturesInUse": {
        "providers": false,
        "monitoring": false
      },
      "orgObservabilityIntegrations": null,
      "serviceAppId": "v5PgrfhsLHT5P90WfN",
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "derickavila",
    "subscription": null,
    "userEmail": "derickmavila@gmail.com",
    "serviceProviderAwsCfStackId": null,
    "serviceProviderAwsCfStackCreated": null,
    "serviceProviderAwsCfStackUpdated": null,
    "serviceProviderAwsCfStackStatus": null,
    "serviceProviderAwsCfStackOutputs": null
  }
}